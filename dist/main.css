/*!*******************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/styles/main.scss ***!
  \*******************************************************************************************************************************************/
@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: inherit;
  cursor: pointer;
}

button {
  background-color: transparent;
  color: inherit;
  border-width: 0;
  padding: 0;
  cursor: pointer;
  line-height: inherit;
  text-align: inherit;
}

figure {
  margin: 0;
}

ul,
ol,
dd {
  margin: 0;
  padding: 0;
  list-style: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
  font-size: inherit;
  font-weight: inherit;
}

p {
  margin: 0;
}

cite {
  font-style: normal;
}

fieldset {
  border-width: 0;
  padding: 0;
  margin: 0;
}

img {
  max-width: 100%;
  height: auto;
}

:root {
  --color--fg: #000;
  --color--bg: #fff;
  --line-height: 1.2;
  --font-size--small: 0.7em;
  --border: 1px solid var(--color--fg);
  --marquee-padding: 0.2em;
}

.marquee {
  display: flex;
  flex-wrap: nowrap;
  overflow: hidden;
}
.marquee__wrapper {
  display: flex;
  flex-wrap: nowrap;
  min-width: max-content;
  animation-name: scroll;
  animation-duration: var(--duration);
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}
.marquee--reverse .marquee__wrapper {
  animation-direction: reverse;
}
.marquee:hover .marquee__wrapper {
  animation-play-state: paused;
}
.marquee--paused .marquee__wrapper {
  animation-play-state: paused;
}
.marquee--paused:hover .marquee__wrapper {
  animation-play-state: running;
}
@keyframes scroll {
  0% {
    transform: translate3d(0, 0, 0);
  }
  100% {
    transform: translate3d(-100%, 0, 0);
  }
}

@media (prefers-reduced-motion) {
  .marquee__wrapper {
    animation-play-state: paused;
  }
  .marquee:hover .marquee__wrapper {
    animation-play-state: running;
  }
}
.analogue-clock {
  width: 100%;
}
.analogue-clock > * {
  transform-origin: 50% 50%;
}
.analogue-clock line {
  stroke: #000000;
  fill: none;
}
.analogue-clock_hand {
  transition-duration: 10ms;
}
.analogue-clock__hand-seconds {
  stroke: #FF0000 !important;
  stroke-width: 2;
  stroke-linecap: round;
}
.analogue-clock__hand-minutes, .analogue-clock__hand-hours {
  stroke-width: 7;
}
.analogue-clock__center {
  stroke: none;
  fill: #000000;
}
.analogue-clock__graduation {
  stroke-width: 1;
}
.analogue-clock__graduation .analogue-clock__graduation-spacer {
  stroke: none;
}
.analogue-clock__graduation:nth-of-type(3), .analogue-clock__graduation:nth-of-type(6), .analogue-clock__graduation:nth-of-type(9), .analogue-clock__graduation:nth-of-type(12) {
  stroke-width: 9;
}
.analogue-clock__graduation:nth-of-type(1) {
  transform: rotate(30deg);
}
.analogue-clock__graduation:nth-of-type(2) {
  transform: rotate(60deg);
}
.analogue-clock__graduation:nth-of-type(3) {
  transform: rotate(90deg);
}
.analogue-clock__graduation:nth-of-type(4) {
  transform: rotate(120deg);
}
.analogue-clock__graduation:nth-of-type(5) {
  transform: rotate(150deg);
}
.analogue-clock__graduation:nth-of-type(6) {
  transform: rotate(180deg);
}
.analogue-clock__graduation:nth-of-type(7) {
  transform: rotate(210deg);
}
.analogue-clock__graduation:nth-of-type(8) {
  transform: rotate(240deg);
}
.analogue-clock__graduation:nth-of-type(9) {
  transform: rotate(270deg);
}
.analogue-clock__graduation:nth-of-type(10) {
  transform: rotate(300deg);
}
.analogue-clock__graduation:nth-of-type(11) {
  transform: rotate(330deg);
}
.analogue-clock__graduation:nth-of-type(12) {
  transform: rotate(360deg);
}

.player {
  display: flex;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
}
.player audio:not([src="/assets/intermission.mp3"]) ~ .player__info2 {
  position: relative;
  text-indent: 1em;
}
.player audio:not([src="/assets/intermission.mp3"]) ~ .player__info2::before {
  content: "";
  position: absolute;
  display: block;
  left: 0;
  box-sizing: border-box;
  border-style: solid;
  width: 0.6em;
  height: 0.76em;
  border-color: red;
  border-width: 0 0.2em 0 0.2em;
  top: 0.1em;
}
.player.paused audio ~ .player__info2::before {
  top: 0.05em;
  width: 0.9em;
  border-width: 0.46em 0 0.46em 0.8em;
  border-color: transparent transparent transparent red;
}

.navigation {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  margin-bottom: 1em;
}
.navigation > * {
  grid-row: 1/2;
}
.navigation a {
  color: var(--color--fg);
  text-decoration: none;
  margin: -0.5em;
  padding: 0.5em;
}
.navigation__home {
  grid-column: 2/3;
  text-align: center;
  font-size: var(--font-size--small);
  text-transform: uppercase;
}
.navigation__home a {
  text-decoration: underline;
}
.navigation__prev, .navigation__next {
  width: min-content;
  line-height: var(--font-size--small);
}
.navigation__prev {
  grid-column: 1/2;
  text-align: left;
  justify-self: start;
}
.navigation__prev::before {
  content: "←";
}
.navigation__next {
  grid-column: 3/4;
  text-align: right;
  justify-self: end;
}
.navigation__next::before {
  content: "→";
}

.wavy-text > * {
  display: inline-block;
  animation: wave;
  animation-duration: 2.5s;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}
@keyframes wave {
  from {
    transform: translate3d(0, -0.3em, 0);
  }
  50% {
    transform: translate3d(0, 0.5em, 0);
  }
  to {
    transform: translate3d(0, -0.3em, 0);
  }
}

.object-scatter-items {
  --size: 10em;
  position: fixed;
  margin: 0;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 999;
  pointer-events: none;
}
.object-scatter-items > * {
  position: absolute;
  width: var(--size);
  height: var(--size);
  top: max(calc(0 * var(--size)), calc((100% - var(--size)) / 100 * var(--random-top)));
  left: max(calc(0 * var(--size)), calc((100% - var(--size)) / 100 * var(--random-left)));
  pointer-events: none;
  transition-duration: 300ms;
  transition-delay: calc(var(--delay) * 0.7ms);
  transition-property: opacity, transform;
  object-fit: contain;
  opacity: 0;
  transform: scale(0.9, 0.9);
}
.object-scatter-items[active] {
  pointer-events: auto;
}
.object-scatter-items[active] > * {
  opacity: 1;
  transform: scale(1, 1);
}

body {
  color: var(--color--fg);
  background: var(--color--bg);
  font-size: 120%;
  line-height: var(--line-height);
  font-family: Helvetica, Helvetica Neue, Arial, sans-serif;
  overscroll-behavior: none;
  overflow-x: hidden;
}
@media screen and (min-width: 41.25em) and (max-width: 87.49em) {
  body {
    font-size: 100%;
  }
}
@media screen and (min-width: 87.5em) {
  body {
    font-size: 150%;
  }
}

a {
  color: blue;
  text-decoration: underline;
}
a.no-underline {
  text-decoration: none;
}

h1 {
  display: none;
}

section {
  padding: 0.8em 1.2em;
}

.player__controls {
  flex-grow: 1;
}
.player__controls > * {
  display: block;
}
.player__info1, .player__info2 {
  font-size: 0.9em;
}
@media screen and (min-width: 31.25em) and (max-width: 41.24em) {
  .player__info1, .player__info2 {
    font-size: 1.2em;
  }
}
@media screen and (min-width: 41.25em) and (max-width: 62.5em) {
  .player__info1, .player__info2 {
    font-size: 1em;
  }
}
@media screen and (min-width: 62.5em) {
  .player__info1, .player__info2 {
    font-size: 1.4em;
  }
}
.player__info1::after {
  content: "";
  display: block;
  height: 0.1em;
  width: 3em;
  max-width: 50%;
  background: #000;
  margin: 0.5em 0;
}

#content > * + * {
  margin-top: 1em;
}

.info {
  position: fixed;
  left: 0;
  right: 0;
  width: 100%;
  display: flex;
  background: var(--color--bg);
  border-top: var(--border);
  border-bottom: var(--border);
  text-transform: uppercase;
  padding-top: var(--marquee-padding);
  padding-bottom: var(--marquee-padding);
  z-index: 50;
}
.info--top {
  top: 0;
}
.info--bottom {
  bottom: 0;
}

.marquee {
  --gap: 4em;
}
.marquee__wrapper {
  gap: var(--gap);
  padding-left: var(--gap);
}
.marquee__item {
  min-width: max-content;
}

.intermission-button {
  color: red;
  text-transform: inherit;
  white-space: nowrap;
  padding-left: calc(var(--marquee-padding) * 2);
  padding-right: calc(var(--marquee-padding) * 2);
}
.intermission-button:not(.playing) .wavy-text > * {
  animation-name: unset;
}
.intermission-button:hover .wavy-text > * {
  animation-name: wave;
}
.intermission-button::before {
  background: red;
  content: "";
  display: inline-block;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  vertical-align: top;
  transition-duration: 500ms;
  margin-top: 0.065em;
}

.lines {
  position: absolute;
  z-index: 40;
  pointer-events: none;
  top: 10vw;
  left: 0;
  width: 100%;
  height: 90vh;
}
@media screen and (min-width: 41.25em) {
  .lines {
    top: 4vh;
    left: 10%;
    width: 90%;
    height: 80vh;
  }
}
.lines svg {
  --size: 70vw;
  position: absolute;
  overflow: visible;
  pointer-events: none;
  max-width: var(--size);
  max-height: var(--size);
  opacity: 0;
  top: max(0 * var(--size), (100% - var(--size)) / 100 * var(--top));
  left: max(0 * var(--size), (100% - var(--size)) / 100 * var(--left));
  animation-name: fadeIn;
  animation-duration: 300ms;
  animation-iteration-count: 1;
  animation-fill-mode: both;
}
@media screen and (min-width: 41.25em) {
  .lines svg {
    --size: 33vw;
  }
}
.lines svg > * {
  pointer-events: initial;
}
.lines svg:nth-child(1) {
  animation-delay: 100ms;
}
.lines svg:nth-child(2) {
  animation-delay: 200ms;
}
.lines svg:nth-child(3) {
  animation-delay: 300ms;
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/*
@include mq.mq($from: medium) {
  #site-content {
    margin-left: auto;
    margin-right: auto;
    border-left: var(--border);
    border-right: var(--border);
    max-width: 90vw;
  }
}
*/
#site-content {
  min-height: 100vh;
  padding-top: calc(var(--line-height) * 1em + var(--marquee-padding) * 2);
  padding-bottom: calc(var(--line-height) * 1em + var(--marquee-padding) * 2);
  display: grid;
  grid-template-columns: 50% 50%;
  grid-auto-rows: auto;
}
#site-content > * {
  grid-column-start: auto;
  grid-column-end: span 2;
}
@media screen and (min-width: 41.25em) {
  #site-content {
    display: grid;
    align-items: stretch;
    grid-template-columns: 25% 25% 25% 25%;
    grid-template-rows: auto 1fr;
    max-height: 100vh;
    overflow: hidden;
  }
  #site-content #about,
#site-content #content {
    overflow-y: scroll;
    scrollbar-color: lightgray white;
  }
}

.widgets {
  display: grid;
  grid-template-columns: 50% 50%;
  background: var(--color--bg);
}
@media screen and (max-width: 41.24em) {
  .widgets {
    position: sticky;
    top: calc(var(--marquee-padding) * 2 + 1.15rem);
    z-index: 35;
    grid-template-columns: 58% 42%;
  }
}

#clock,
#player {
  grid-column-end: span 1;
  border-bottom: var(--border);
}
#clock::-webkit-scrollbar,
#player::-webkit-scrollbar {
  width: 0.5em;
}

#clock {
  display: flex;
  padding: 1.5em;
}
@media screen and (max-width: 41.24em) {
  #clock {
    border-left: var(--border);
    grid-column: 2/3;
    grid-row: 1/2;
  }
}

@media screen and (max-width: 41.24em) {
  #player {
    grid-column: 1/2;
    grid-row: 1/2;
  }
}
@media screen and (min-width: 41.25em) {
  #player {
    border-left: var(--border);
  }
}

#content {
  border-bottom: var(--border);
  border-right: dotted 4px var(--color--fg);
}
#content h3 {
  font-size: var(--font-size--small);
}
@media screen and (min-width: 41.25em) {
  #content {
    grid-column-start: 3;
    grid-row-start: 1;
    grid-row-end: 3;
    border-left: var(--border);
  }
}

#about h2 {
  font-size: var(--font-size--small);
  text-transform: uppercase;
}
#about > * + * {
  margin-top: 1rem;
}
#about > * + h2 {
  margin-top: 2rem;
}

.schedule {
  columns: 2;
  margin-top: 0.15em;
  margin-bottom: 1em;
}
.schedule__item a {
  color: var(--color--fg);
  text-decoration: none;
  display: flex;
  width: 100%;
  overflow: hidden;
  gap: 1em;
}
.schedule__item a time {
  width: 2em;
  flex-shrink: 0;
}
.schedule__item a .minute {
  font-size: var(--font-size--small);
  vertical-align: top;
  position: relative;
  top: 0.05em;
}
.schedule__item a:hover .name {
  text-decoration: underline;
}

.person__content, .person__time {
  display: block;
}
.person__content {
  font-size: 2em;
}
@media screen and (min-width: 41.25em) {
  .person__content {
    font-size: 3em;
  }
}
.person__content a {
  cursor: url(2c0150814e3bd06d545e.svg) 15 15, pointer;
}
.person__time {
  margin-top: 0.5em;
}
.person__time .minute {
  font-size: var(--font-size--small);
  vertical-align: top;
  position: relative;
  top: 0.05em;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/